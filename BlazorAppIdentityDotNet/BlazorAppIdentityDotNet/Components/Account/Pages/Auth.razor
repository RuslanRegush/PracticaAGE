@page "/cererea"
@using Microsoft.EntityFrameworkCore
@using BlazorAppIdentityDotNet.Data.Models
@inject NavigationManager NavigationManager
@inject IDbContextFactory<BlazorAppIdentityDotNet.Data.ApplicationDbContext> DbFactory
@using Microsoft.AspNetCore.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]
@rendermode InteractiveServer

<PageTitle>Cerere</PageTitle>

<AuthorizeView>
    <p>Bun venit @context.User.Identity?.Name</p>
    <p></p>

    @if (Cerere == null)
    {
        <button type="button" class="btn btn-primary" @onclick="LinkToCreateCerere">Cerere nouă</button>
    }
    else
    {
        <div>
            <p>
                <strong>Stare cerere: </strong>
                @Enum.GetName(typeof(StareEnum), Cerere.StateId)
            </p>

            @if (!string.IsNullOrEmpty(Cerere.Message))
            {
                <p><strong>Cauza respingerii:</strong> @Cerere.Message</p>
            }
        </div>
        <button type="button" class="btn btn-primary" @onclick="LinkToEditCerere">Editează cererea</button>
    }
</AuthorizeView>

@code {
    private Cerere Cerere { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            var email = user.Identity?.Name;
            Console.WriteLine("User email: " + email);

            if (string.IsNullOrEmpty(email))
            {
                Console.WriteLine("User email is null or empty");
                return;
            }

            try
            {
                using var context = DbFactory.CreateDbContext();

                // Retrieve the user by email to get the UserId
                var userEntity = await context.Users
                    .FirstOrDefaultAsync(u => u.Email == email);

                if (userEntity == null)
                {
                    Console.WriteLine("User not found.");
                    return;
                }

                // Retrieve the Cerere by UserId
                Cerere = await context.Cerere.FirstOrDefaultAsync(c => c.UserId == userEntity.Id);

                if (Cerere == null)
                {
                    Console.WriteLine("No Cerere found for this user.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An error occurred: {ex.Message}");
            }
        }
    }

    private void  LinkToCreateCerere()
    {
        NavigationManager.NavigateTo("/cereres/create");
    }

    private void LinkToEditCerere()
    {
        if (Cerere != null)
        {
            NavigationManager.NavigateTo("/cereres/edit");
        }
        else
        {
            Console.WriteLine("Cerere is null, cannot navigate to edit.");
        }
    }
}
