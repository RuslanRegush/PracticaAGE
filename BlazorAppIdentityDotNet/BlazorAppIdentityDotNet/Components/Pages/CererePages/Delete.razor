@page "/cereres/delete"
@using Microsoft.EntityFrameworkCore
@using BlazorAppIdentityDotNet.Data.Models
@inject IDbContextFactory<BlazorAppIdentityDotNet.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Cerere</h2>
    <hr />
    @if (cerere is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">FirstName</dt>
            <dd class="col-sm-10">@cerere.FirstName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">LastName</dt>
            <dd class="col-sm-10">@cerere.LastName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">BirthDate</dt>
            <dd class="col-sm-10">@cerere.BirthDate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">IDNP</dt>
            <dd class="col-sm-10">@cerere.IDNP</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CategoryId</dt>
            <dd class="col-sm-10">@cerere.CategoryId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">StateId</dt>
            <dd class="col-sm-10">@cerere.StateId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">UserId</dt>
            <dd class="col-sm-10">@cerere.UserId</dd>
        </dl>
        <EditForm method="post" Model="cerere" OnValidSubmit="DeleteCerere" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(cerere is null)">Delete</button> |
            <a href="/cereres">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Cerere? cerere;

    [SupplyParameterFromQuery]
    private int CerereId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        cerere = await context.Cerere.FirstOrDefaultAsync(m => m.CerereId == CerereId);

        if (cerere is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteCerere()
    {
        using var context = DbFactory.CreateDbContext();
        context.Cerere.Remove(cerere!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/cereres");
    }
}
