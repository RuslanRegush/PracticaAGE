@page "/cereres/create"
@using BlazorAppIdentityDotNet.Data
@using Microsoft.EntityFrameworkCore
@using BlazorAppIdentityDotNet.Data.Models
@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.AspNetCore.Components.QuickGrid
@inject IDbContextFactory<BlazorAppIdentityDotNet.Data.ApplicationDbContext> DbFactory
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Cerere Nouă</PageTitle>

<h1>Crearea cererii</h1>

<p></p>
<h2>Sunteți logat ca: @UserName</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Cerere" OnValidSubmit="AddCerere" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <div class="mb-3">
                <label for="firstname" class="form-label">Prenume:</label> 
                <InputText id="firstname" @bind-Value="Cerere.FirstName" class="form-control" /> 
                <ValidationMessage For="() => Cerere.FirstName" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="lastname" class="form-label">Nume:</label> 
                <InputText id="lastname" @bind-Value="Cerere.LastName" class="form-control" /> 
                <ValidationMessage For="() => Cerere.LastName" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="birthdate" class="form-label">Data nașterii:</label> 
                <InputDate id="birthdate" @bind-Value="Cerere.BirthDate" class="form-control" /> 
                <ValidationMessage For="() => Cerere.BirthDate" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="idnp" class="form-label">IDNP:</label> 
                <InputText id="idnp" @bind-Value="Cerere.IDNP" class="form-control" /> 
                <ValidationMessage For="() => Cerere.IDNP" class="text-danger" /> 
            </div>        


            <div class="mb-3">
                <label for="category" class="form-label">Categorie:</label>
                <InputSelect id="categoryid" @bind-Value="Cerere.Category" class="form-control">
                    <option></option>
                    @foreach (var category in Enum.GetValues(typeof(CategorieEnum)).Cast<CategorieEnum>())
                    {
                        <option value="@category.ToString()">@category.ToString()</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => Cerere.Category" class="text-danger" />
            </div>

            <button type="submit" class="btn btn-primary">Trimite</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/cereres">Înnapoi</a>
</div>

@code {
        [SupplyParameterFromForm]
        private Cerere Cerere { get; set; } = new();
    private String UserName="";
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            UserName = string.Concat(user.FindFirst(c => c.Type == "FirstName")?.Value ?? "Anonim", " ",
            user.FindFirst(c => c.Type == "LastName")?.Value ?? "Anonim");
            //user.FindFirst(c => c.Type == "Username")?.Value ?? "example@mail.com"; // Username este IDNP
            Cerere.Message = "";
            Cerere.FirstName = user.FindFirst(c => c.Type == "FirstName")?.Value ?? "";
            Cerere.LastName = user.FindFirst(c => c.Type == "LastName")?.Value ?? "";
            Cerere.IDNP = user.FindFirst(c => c.Type == "Username")?.Value ?? "";
            Cerere.BirthDate = DateTime.Parse(user.FindFirst(c => c.Type == "BirthDate")?.Value ?? "");

        }
    }
    private async Task AddCerere()
    {
        using var context = DbFactory.CreateDbContext();
        if(
            Cerere.FirstName != null &&
            Cerere.LastName != null &&
            Cerere.IDNP != null &&
            Cerere.CerereId != null

        )
        {
            Cerere.CreateTime = DateTime.Today;
            Cerere.State = StareEnum.Schita.ToString();
            context.Cerere.Add(Cerere);
            await context.SaveChangesAsync();
            NavigationManager.NavigateTo("/cererea");
        }
    }

}
