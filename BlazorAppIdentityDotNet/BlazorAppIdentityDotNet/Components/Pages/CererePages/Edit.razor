@page "/cereres/edit"
@using Microsoft.EntityFrameworkCore
@using BlazorAppIdentityDotNet.Data.Models
@inject IDbContextFactory<BlazorAppIdentityDotNet.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

@rendermode InteractiveServer

<PageTitle>Edit</PageTitle>

<h2>Modificarea cererii</h2>
<hr />
@if (Cerere is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm Model="Cerere" OnValidSubmit="UpdateCerere">
                <DataAnnotationsValidator />
                <input type="hidden" name="Cerere.CerereId" value="@Cerere.CerereId" />
                <div class="mb-3">
                    <label for="firstname" class="form-label">FirstName:</label>
                    <InputText id="firstname" @bind-Value="Cerere.FirstName" class="form-control" />
                    <ValidationMessage For="() => Cerere.FirstName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="lastname" class="form-label">LastName:</label>
                    <InputText id="lastname" @bind-Value="Cerere.LastName" class="form-control" />
                    <ValidationMessage For="() => Cerere.LastName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="birthdate" class="form-label">BirthDate:</label>
                    <InputDate id="birthdate" @bind-Value="Cerere.BirthDate" class="form-control" />
                    <ValidationMessage For="() => Cerere.BirthDate" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="idnp" class="form-label">IDNP:</label>
                    <InputText id="idnp" @bind-Value="Cerere.IDNP" class="form-control" disabled />
                </div>
                <div class="mb-3">
                    <label for="categoryid" class="form-label">Categorie:</label>
                    <InputSelect id="categoryid" @bind-Value="Cerere.Category" class="form-control">
                        <option></option>
                        @foreach (var category in Enum.GetValues(typeof(CategorieEnum)).Cast<CategorieEnum>())
                        {
                            <option value="@category.ToString()">@category.ToString()</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Cerere.Category" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Salvează</button>
            </EditForm>
        </div>
    </div>
}

@code {
    private Cerere? Cerere { get; set; }
    private string? UserIDNP;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Retrieve the IDNP from the authenticated user
        UserIDNP = user.FindFirst(c => c.Type == "Username")?.Value;

        if (string.IsNullOrEmpty(UserIDNP))
        {
            Console.WriteLine("User ID not found.");
            return;
        }

        try
        {
            using var context = DbFactory.CreateDbContext();
            Cerere = await context.Cerere.FirstOrDefaultAsync(c => c.IDNP == UserIDNP);

            if (Cerere == null)
            {
                Console.WriteLine("No Cerere found for this user.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
    }

    private async Task UpdateCerere()
    {
        using var context = DbFactory.CreateDbContext();
        Cerere.State = StareEnum.Schita.ToString();
        Cerere.Message = "";
        context.Attach(Cerere!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
            NavigationManager.NavigateTo("/cererea");
        }
        catch (DbUpdateConcurrencyException)
        {
            NavigationManager.NavigateTo("/notfound");
        }
    }
}
